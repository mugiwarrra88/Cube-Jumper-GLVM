CXX = g++
CC = gcc
VULKAN_SDK = /ucrt64
LDFLAGS = -I$(VULKAN_SDK)/include -L$(VULKAN_SDK)/lib -lgdi32 -lopengl32 -lwinmm -lvulkan.dll -static-libgcc -static-libstdc++ -static
CXXFLAGS = -c -std=c++20 -g -Wall -I$(VULKAN_SDK)/include -O0
CFLAGS = -c -g -Wall
INC = -I./include
TEX = -I./textures
BUILD = build
SOURCES_ENGINE = src/Engine.cpp src/EngineMain.cpp
SOURCES_BASE = src/ShaderProgram.cpp src/Event.cpp src/TimerCreator.cpp \
	src/ComponentManager.cpp src/EntityManager.cpp src/SystemManager.cpp \
	src/SoundEngineFactory.cpp src/TextureManager.cpp \
	src/WavefrontObjParser.cpp src/MeshManager.cpp src/JsonParser.cpp

SOURCES_SYSTEMS = src/Systems/CollisionSystem.cpp src/Systems/AnimationSystem.cpp src/Systems/GUISystem.cpp \
	src/Systems/PhysicsSystem.cpp src/Systems/MovementSystem.cpp \
	src/Systems/ProjectileSystem.cpp src/Systems/CameraSystem.cpp

SOURCES_WINAPI = src/WinApi/ChronoWin.cpp src/WinApi/SoundEngineWaveform.cpp \
	src/WinApi/WindowWinVulkan.cpp src/WinApi/WindowWinOpengl.cpp

SOURCES_GRAPHICS = src/GraphicAPI/Opengl.cpp src/GraphicAPI/Vulkan.cpp

SOURCES_TEXTURES = textures/glvm.cpp textures/sample1.cpp textures/sample2.cpp

SOURCES_C = GLPointer.c

OBJECTS_ENGINE = $(SOURCES_ENGINE:src/%.cpp=$(BUILD)/%.o)
OBJECTS_BASE = $(SOURCES_BASE:src/%.cpp=$(BUILD)/%.o)
OBJECTS_SYSTEMS = $(SOURCES_SYSTEMS:src/Systems/%.cpp=$(BUILD)/Systems/%.o)
OBJECTS_WINAPI = $(SOURCES_WINAPI:src/WinApi/%.cpp=$(BUILD)/WinApi/%.o)
OBJECTS_GRAPHICS = $(SOURCES_GRAPHICS:src/GraphicAPI/%.cpp=$(BUILD)/GraphicAPI/%.o)
OBJECTS_TEXTURES = $(SOURCES_TEXTURES:textures/%.cpp=$(BUILD)/%.o)
OBJECTS_C = $(SOURCES_C:%.c=$(BUILD)/%.o)

OBJECTS = $(OBJECTS_ENGINE) $(OBJECTS_BASE) $(OBJECTS_SYSTEMS) $(OBJECTS_WINAPI) $(OBJECTS_GRAPHICS) $(OBJECTS_TEXTURES) $(OBJECTS_C)

EXECUTABLE = winGame

all: $(BUILD) $(EXECUTABLE)

$(BUILD):
	mkdir -p $(BUILD)
	mkdir -p $(BUILD)/Systems
	mkdir -p $(BUILD)/WinApi
	mkdir -p $(BUILD)/GraphicAPI

$(EXECUTABLE): $(OBJECTS)
	$(CXX) $(OBJECTS) $(LDFLAGS) -o $(BUILD)/$@

$(BUILD)/%.o: src/%.cpp
	$(CXX) $(INC) $(TEX) $(CXXFLAGS) $< -o $@

$(BUILD)/Systems/%.o: src/Systems/%.cpp
	mkdir -p $(BUILD)/Systems
	$(CXX) $(INC) $(TEX) $(CXXFLAGS) $< -o $@

$(BUILD)/WinApi/%.o: src/WinApi/%.cpp
	mkdir -p $(BUILD)/WinApi
	$(CXX) $(INC) $(TEX) $(CXXFLAGS) $< -o $@

$(BUILD)/GraphicAPI/%.o: src/GraphicAPI/%.cpp
	mkdir -p $(BUILD)/GraphicAPI
	$(CXX) $(INC) $(TEX) $(CXXFLAGS) $< -o $@

$(BUILD)/%.o: textures/%.cpp
	$(CXX) $(INC) $(TEX) $(CXXFLAGS) $< -o $@

$(BUILD)/%.o: %.c
	$(CC) $(INC) $(TEX) $(CFLAGS) $< -o $@

clean:
	rm -rf $(BUILD)/*

.PHONY: all clean
